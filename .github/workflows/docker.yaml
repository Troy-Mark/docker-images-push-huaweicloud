name: Docker to HuaweiCloud SWR

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths: 
      - 'images.json'

env:
  HUAWEICLOUD_REGISTRY: "${{ secrets.HW_REGISTRY }}" 
  HUAWEICLOUD_ORG_NAME: "${{ secrets.HW_ORG_NAME }}" 
  HUAWEICLOUD_USER: "${{ secrets.HW_REGISTRY_USER }}" 
  HUAWEICLOUD_PASSWORD: "${{ secrets.HW_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Images Push to SWR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq skopeo

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x

    - name: Login to HuaweiCloud SWR
      run: |
        echo "Logging in to Huawei Cloud SWR..."
        docker login -u "$HUAWEICLOUD_USER" -p $HUAWEICLOUD_PASSWORD $HUAWEICLOUD_REGISTRY
      env:
        HUAWEICLOUD_USER: ${{ secrets.HW_REGISTRY_USER }}
        HUAWEICLOUD_PASSWORD: ${{ secrets.HW_REGISTRY_PASSWORD }}

    - name: Process and push images
      run: |
        set -euo pipefail
        declare -A ARCH_MAP=(
          ["386"]="linux/386"
          ["amd64"]="linux/amd64"
          ["armv5"]="linux/arm/v5"
          ["armv6"]="linux/arm/v6"
          ["armv7"]="linux/arm/v7"
          ["arm64v8"]="linux/arm64/v8"
          ["ppc64le"]="linux/ppc64le"
          ["riscv64"]="linux/riscv64"
          ["s390x"]="linux/s390x"
        )

        echo "Reading images from images.json..."
        jq -c '.[]' images.json | while read -r item; do
          image=$(jq -r '.image' <<< "$item")
          version=$(jq -r '.version' <<< "$item")
          
          # 标准化镜像名称
          clean_image=$(sed 's/@sha256.*//; s/[^a-zA-Z0-9._/-]//g' <<< "$image")
          [[ "$clean_image" == */* ]] || clean_image="library/$clean_image"

          echo "Processing image: $image with version: $version"
          
          # 构建完整的镜像标签
          if [[ -n "$version" ]]; then
            full_image="$image:$version"
          else
            full_image="$image:latest"
          fi
            
          # 多架构处理
          jq -r '.architectures[]' <<< "$item" | while read -r arch; do
            target_tag="${arch}-${version:-latest}"
            platform=${ARCH_MAP[$arch]}
            
            echo "Processing architecture: $arch (platform: $platform)"
            
            # 拉取指定架构镜像
            echo "Pulling image $full_image for platform $platform..."
            docker pull --platform "$platform" "$full_image"
            
            # 确定目标镜像路径
            if [[ "$image" == "redis" ]]; then
              hw_image="$HUAWEICLOUD_REGISTRY/$HUAWEICLOUD_ORG_NAME/redis"
            elif [[ "$image" == "elasticsearch/elasticsearch" ]]; then
              hw_image="$HUAWEICLOUD_REGISTRY/$HUAWEICLOUD_ORG_NAME/elasticsearch/elasticsearch"
            elif [[ "$clean_image" =~ ^([^/]*)/(.*)$ ]]; then
              namespace="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]}"
              hw_image="$HUAWEICLOUD_REGISTRY/$HUAWEICLOUD_ORG_NAME/$namespace/$repo"
            else
              hw_image="$HUAWEICLOUD_REGISTRY/$HUAWEICLOUD_ORG_NAME/$(basename $clean_image)"
            fi
            
            echo "Tagging image as ${hw_image}:${target_tag}..."
            docker tag "$full_image" "${hw_image}:${target_tag}"
            
            echo "Pushing image ${hw_image}:${target_tag} to Huawei Cloud SWR..."
            docker push "${hw_image}:${target_tag}"
            
            # 清理中间镜像
            echo "Cleaning up intermediate images..."
            docker rmi "$full_image" "${hw_image}:${target_tag}" || true
          done
        done
        # 全局清理
        echo "Performing global cleanup of unused images..."
        docker image prune -f
      env:
        HUAWEICLOUD_REGISTRY: ${{ secrets.HW_REGISTRY }}
        HUAWEICLOUD_ORG_NAME: ${{ secrets.HW_ORG_NAME }}
        HUAWEICLOUD_USER: ${{ secrets.HW_REGISTRY_USER }}
        HUAWEICLOUD_PASSWORD: ${{ secrets.HW_REGISTRY_PASSWORD }}
